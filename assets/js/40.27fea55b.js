(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{567:function(a,t,e){"use strict";e.r(t);var s=e(7),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("hr"),a._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#强缓存"}},[a._v("强缓存")]),e("ul",[e("li",[e("a",{attrs:{href:"#expires"}},[a._v("Expires")])]),e("li",[e("a",{attrs:{href:"#cache-control"}},[a._v("Cache-control")])])])]),e("li",[e("a",{attrs:{href:"#协商缓存"}},[a._v("协商缓存")]),e("ul",[e("li",[e("a",{attrs:{href:"#last-modified-和-if-modified-since"}},[a._v("Last-Modified 和 If-Modified-Since")])]),e("li",[e("a",{attrs:{href:"#etag-与-if-none-match"}},[a._v("ETag 与 If-None-Match")])])])]),e("li",[e("a",{attrs:{href:"#如果什么缓存策略都没设置-那么浏览器会怎么处理"}},[a._v("如果什么缓存策略都没设置，那么浏览器会怎么处理？")])])])]),e("p"),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("通常浏览器缓存策略分为两种："),e("strong",[a._v("强缓存")]),a._v("和"),e("strong",[a._v("协商缓存")]),a._v("，并且缓存策略都是通过设置 HTTP Header 来实现的")]),a._v(" "),e("h1",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),e("p",[a._v("强缓存可以通过设置两种 HTTP Header 实现：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Expires")]),a._v(" 和 "),e("code",[a._v("Cache-Control")])]),a._v(" "),e("li",[a._v("强缓存表示"),e("strong",[a._v("在缓存期间不需要请求")]),a._v("，"),e("code",[a._v("status: 200")])])]),a._v(" "),e("h2",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[a._v("#")]),a._v(" Expires")]),a._v(" "),e("p",[a._v("该字段的值是一个绝对时间")]),a._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("Expires:")]),a._v(" Wed, 22 Oct 2018 08:41:00 GMT\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("Expires 是 HTTP/1.0 的产物，表示资源会在 "),e("code",[a._v("Wed, 22 Oct 2018 08:41:00 GMT")]),a._v(" 后过期，需要再次请求。并且 Expires "),e("strong",[a._v("受限于本地时间，如果修改了本地时间，可能会造成缓存失效")]),a._v("。")]),a._v(" "),e("h2",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[a._v("#")]),a._v(" Cache-control")]),a._v(" "),e("p",[a._v("该字段的值是一个相对时间，而且在请求头与响应头中都可设置")]),a._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("Cache-control:")]),a._v(" max-age=30\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[a._v("Cache-Control 出现于 HTTP/1.1，优先级高于 Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。")]),a._v(" "),e("li",[a._v("Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令")])]),a._v(" "),e("p",[a._v("在 HTTP/1.1 中，Cache-Control 是最重要的规则，主要用于控制网页缓存，主要取值为：")]),a._v(" "),e("h3",{attrs:{id:"可缓存性相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可缓存性相关"}},[a._v("#")]),a._v(" 可缓存性相关")]),a._v(" "),e("ul",[e("li",[a._v("public：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),a._v(" "),e("li",[a._v("private：所有内容只有客户端可以缓存，"),e("strong",[a._v("Cache-Control 的默认取值")])]),a._v(" "),e("li",[a._v("no-cache：表示客户端可以缓存资源，但每次使用缓存资源前都必须重新验证其有效性")]),a._v(" "),e("li",[a._v("no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")])]),a._v(" "),e("h3",{attrs:{id:"到期时间相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#到期时间相关"}},[a._v("#")]),a._v(" 到期时间相关")]),a._v(" "),e("ul",[e("li",[a._v("max-age=xxx (xxx is numeric)：缓存内容将在 xxx 秒后失效")]),a._v(" "),e("li",[a._v("s-maxage=xxx: 代理缓存的有效时间")]),a._v(" "),e("li",[a._v("max-stale=xxx: 表明客户端愿意接收一个已经过期的资源，只要代理缓存过期时间不超过 xxx 秒")]),a._v(" "),e("li",[a._v("min-fresh=xxx: 表明客户端可以接受在代理缓存在到期前 xxx 秒的缓存")])]),a._v(" "),e("h3",{attrs:{id:"重新验证和重新加载相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重新验证和重新加载相关"}},[a._v("#")]),a._v(" 重新验证和重新加载相关")]),a._v(" "),e("ul",[e("li",[a._v("must-revalidate：一旦资源过期（比如已经超过 max-age），在成功向原始服务器验证之前，缓存不能用该资源响应后续请求。")]),a._v(" "),e("li",[a._v("proxy-revalidate：与 must-revalidate 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。")])]),a._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),e("ul",[e("li",[a._v("only-if-cached：表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。")])]),a._v(" "),e("p",[a._v("Cache-Control 的值是可以混合使用的，比如：")]),a._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("Cache-Control:")]),a._v(" private, max-age=0, no-cache\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("当混合使用的时候它们的优先级如下图所示：")]),a._v(" "),e("Shadow-Img",{attrs:{src:a.$withBase("/assets/http/7.png")}}),a._v(" "),e("h1",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),e("p",[a._v("如果强缓存不可用，就需要通过协商缓存，向服务器发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现："),e("strong",[a._v("Last-Modified")]),a._v(" 和 "),e("strong",[a._v("ETag")]),a._v("\n当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，且不会返回数据体，并更新浏览器缓存有效期；否则，返回 200，并返回文件内容，根据缓存信息设置缓存。")]),a._v(" "),e("h2",{attrs:{id:"last-modified-和-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since"}},[a._v("#")]),a._v(" Last-Modified 和 If-Modified-Since")]),a._v(" "),e("p",[a._v("Last-Modified 表示资源的最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。")]),a._v(" "),e("p",[a._v("但是 Last-Modified 存在一些弊端：")]),a._v(" "),e("ul",[e("li",[a._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源")]),a._v(" "),e("li",[a._v("因为 Last-Modified 只能"),e("strong",[a._v("以秒计时")]),a._v("，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag")])]),a._v(" "),e("h2",{attrs:{id:"etag-与-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-与-if-none-match"}},[a._v("#")]),a._v(" ETag 与 If-None-Match")]),a._v(" "),e("p",[a._v("ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。"),e("strong",[a._v("并且 ETag 优先级比 Last-Modified 高")]),a._v("。")]),a._v(" "),e("h1",{attrs:{id:"如果什么缓存策略都没设置-那么浏览器会怎么处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果什么缓存策略都没设置-那么浏览器会怎么处理"}},[a._v("#")]),a._v(" 如果什么缓存策略都没设置，那么浏览器会怎么处理？")]),a._v(" "),e("p",[a._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。")])],1)}),[],!1,null,null,null);t.default=r.exports}}]);