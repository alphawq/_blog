(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{563:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[s._v("#")]),s._v(" 背景")]),s._v(" "),a("p",[s._v("前段时间写了个给博客加密访问的插件，链接在"),a("a",{attrs:{href:"https://github.com/alphawq/vuepress-plugin-posts-encrypt",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("。虽然实现了对于隐私路由的验证访问功能，但是密码却是需要在源代码里配置的，这一点就很不友好，尤其像我一样把博客托管到 "),a("code",[s._v("Github Pages")]),s._v(" 上的人，如果别人可以直接看到源代码，那加不加密访问就没有任何意义了。")]),s._v(" "),a("h1",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[s._v("#")]),s._v(" 解决方法")]),s._v(" "),a("p",[s._v("对应的解决方案其实也有不少，记录一下")]),s._v(" "),a("h2",{attrs:{id:"gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[s._v("#")]),s._v(" .gitignore")]),s._v(" "),a("p",[s._v("这种方式比较简单，只需要把源代码目录添加到 "),a("code",[s._v(".gitignore")]),s._v(" 里就可以了，仓库里只存放打包编译过后的产物。")]),s._v(" "),a("p",[s._v("不过带来的问题就是源代码需要维护在本地磁盘上，如果哪天不小心 "),a("code",[s._v("rm -rf")]),s._v(" 就找不回来了")]),s._v(" "),a("h2",{attrs:{id:"公开仓储-私有仓储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公开仓储-私有仓储"}},[s._v("#")]),s._v(" 公开仓储 + 私有仓储")]),s._v(" "),a("p",[s._v("这种方式就是采用两个仓储，私有仓库用来存放源码，公开仓库用来存放产物。这样就解决了源代码存储在本地磁盘上的弊端。")]),s._v(" "),a("p",[s._v("问题就是，需要维护两个仓库，每次需要发布到线上的时候，都需要 "),a("code",[s._v("push")]),s._v(" 两遍才可以")]),s._v(" "),a("h2",{attrs:{id:"公开仓储-私有仓储-github-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公开仓储-私有仓储-github-actions"}},[s._v("#")]),s._v(" 公开仓储 + 私有仓储 + Github Actions")]),s._v(" "),a("p",[s._v("这种方式就是为了解决上面那种方式需要 push 两次代码的情况，借助的正式 Github Actions 的能力。原理也很简单，整体流程如下：")]),s._v(" "),a("p",[a("code",[s._v("源代码 push ----\x3e 触发自定义的 Github Actions Job ----\x3e 自动构建并将产物 push 到公开仓库 ----\x3e Done")])]),s._v(" "),a("p",[s._v("有关 Github Actions 的含义以及使用可以参考"),a("a",{attrs:{href:"https://docs.github.com/cn/actions/quickstart",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),a("OutboundLink")],1),s._v("，这里简明扼要的说一下具体的操作步骤。下面约定 "),a("code",[s._v("blog")]),s._v(" 为公开仓库，"),a("code",[s._v("_blog")]),s._v(" 为私有仓库，先在你的 "),a("code",[s._v("github")]),s._v(" 上创建这两个仓库。")]),s._v(" "),a("h3",{attrs:{id:"第一步-创建-github-actions-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一步-创建-github-actions-配置文件"}},[s._v("#")]),s._v(" 第一步：创建 "),a("code",[s._v("Github Actions")]),s._v(" 配置文件")]),s._v(" "),a("p",[s._v("在 blog 库中添加 "),a("code",[s._v(".github/workflows")]),s._v(" 目录，并在里面创建一个名为 "),a("code",[s._v("deploy.yml")]),s._v(" 的新文件（名字随便起）。\n然后添加如下内容到创建好的配置文件里，字段的含义如下：")]),s._v(" "),a("blockquote",[a("p",[s._v("Jobs（任务）：即配置的 jobs，jobs 默认是并行运行，可以通过 needs 关键字来设置依赖的其他 jobs。")])]),s._v(" "),a("blockquote",[a("p",[s._v("Steps（步骤）：即 steps，jobs 中执行的每一步，顺序执行。每个 stps 都在自己的环境上下文中运行。一个 jobs 中可以有无限个步骤。")])]),s._v(" "),a("blockquote",[a("p",[s._v("Runs（操作）：并非所有步骤都会运行操作，但是操作都是在步骤中运行的。操作是具体的命令，如打印当前目录、安装依赖等。")])]),s._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Deploy\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# on 定义的是执行该 Action 的时机，这里的配置是指：当 main 分支的 push 事件被触发的时候执行该任务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("branches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# jobs 是定义你要运行的具体任务，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个 Action 可以有多个 Job")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个 Job 可以有多个 Step")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个 Step 又可以有多个 Run")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("latest "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行在 ubuntu 系统环境下")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" actions/checkout@v2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uses 命令允许我们使用别人定义好的 Action，这里是从仓库检出分支")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" actions/setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("node@v2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里是设置 node 版本")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里相当于传递给上面指令的参数，告诉他使用 node@12.13.1 这个版本")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node-version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12.13.1'")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Install Dependencies "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# name 定义步骤的名称，这个可以在该 Action 运行起来之后，在 Github Actions Tab 下看到")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# `run: |` 的方式，允许我们一次定义多个要执行的命令")]),s._v("\n          yarn install\n          yarn run build\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Push To Pages\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("working-directory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ./dist "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定下面指令运行的目录")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[s._v("\n          git init\n          git checkout -b main\n          git add -A")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里把下面所有 `<YOUR_NAME>/<YOUR_EMAIL>/<COMMIT_MSG>/<YOUR_TOKEN>` 替换成你自己的就可以了")]),s._v("\n          git "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("c user.name='<YOUR_NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("c user.email='<YOUR_EMAIL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("' commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("m '<COMMIT_MSG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("'\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里需要一个 共开仓库 的 secrets 配置，这里的 secrets 是一个环境变量，可以直接拿过来直接用")]),s._v("\n          git remote add origin https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("secrets.<YOUR_TOKEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("@github.com/<YOUR_NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("/blog.git\n          git push origin main "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("q\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h3",{attrs:{id:"第二步-添加授权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二步-添加授权"}},[s._v("#")]),s._v(" 第二步：添加授权")]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("Action")]),s._v(" 是运行在可以理解为容器内部的，所以并没有向你的仓库推送代码的权限。所以就需要一种授权机制，让其可以向你的 "),a("code",[s._v("blog")]),s._v(" 仓库推送构建产物。")]),s._v(" "),a("p",[s._v("之前 "),a("code",[s._v("Github")]),s._v(" 是可以通过 "),a("code",[s._v("https://${user.name}:${user.password}@github.com/<YOUR_NAME>/blog.git")]),s._v(" 这种"),a("code",[s._v("用户名 + 密码")]),s._v("的方式往仓库 "),a("code",[s._v("push")]),s._v(" 代码的。但是这种方式不够灵活，后面就换成了使用 "),a("code",[s._v("Personal Token")]),s._v(" 的方式了。")]),s._v(" "),a("p",[s._v("ok，现在我们需要从私有的 "),a("code",[s._v("_blog")]),s._v(" 仓库向公开的 "),a("code",[s._v("blog")]),s._v(" 仓库 "),a("code",[s._v("push")]),s._v(" 代码，那么就需要 "),a("code",[s._v("_blog")]),s._v(" 仓库向 "),a("code",[s._v("blog")]),s._v(" 仓库进行授权，授权过程主要分为两步")]),s._v(" "),a("h4",{attrs:{id:"创建-personal-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-personal-token"}},[s._v("#")]),s._v(" 创建 Personal Token")]),s._v(" "),a("p",[s._v("当前的 "),a("code",[s._v("CI")]),s._v(" 运行在 "),a("code",[s._v("blog")]),s._v(" 仓库，但是需要往 "),a("code",[s._v("_blog")]),s._v(" 仓库做一些事情，那么你就需要 "),a("code",[s._v("_blog")]),s._v(" 仓库的管理员生成的 "),a("code",[s._v("Personal Token")]),s._v("，然后分配适当权限即可。这个 "),a("code",[s._v("Token")]),s._v(" 的生成步骤如下，创建的时候一定记住了，确认之后就看不到了，不过可以重新生成。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1")]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/2.jpg"),ht:"200",width:"auto"}})],1),s._v(" "),a("li",[a("p",[s._v("2")]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/3.jpg"),wd:"200"}})],1),s._v(" "),a("li",[a("p",[s._v("3：红框里的内容是 "),a("code",[s._v("授权信息")]),s._v(" 以及 "),a("code",[s._v("token 过期时间")]),s._v(" 配置")]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/4.jpg")}})],1)]),s._v(" "),a("h4",{attrs:{id:"创建-secrets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-secrets"}},[s._v("#")]),s._v(" 创建 secrets")]),s._v(" "),a("p",[s._v("这一步主要是为了加密 "),a("code",[s._v("Personal Token")]),s._v("，毕竟不能把这种东西直接放到配置文件中。")]),s._v(" "),a("p",[s._v("下面就在 "),a("code",[s._v("_blog")]),s._v(" 仓库创建一个 "),a("code",[s._v("secrets token")]),s._v("，创建的方式也很简单，如下：")]),s._v(" "),a("ul",[a("li",[s._v("找到 "),a("code",[s._v("_blog")]),s._v(" 仓库下的 "),a("code",[s._v("setting")]),s._v(" Tab，然后点击进入到 "),a("code",[s._v("secrets")]),s._v(" 配置")])]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/1.jpg")}}),s._v(" "),a("ul",[a("li",[s._v("起一个名字，这个名字就是上面 CI 流程里的 "),a("code",[s._v("<YOUR_TOKEN>")]),s._v("，然后将上一步生成的 "),a("code",[s._v("Personal Token")]),s._v(" 填进去，点击添加就行了")])]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/6.jpg")}}),s._v(" "),a("p",[s._v("这样就算是完成了，下面就修改下代码，"),a("code",[s._v("push")]),s._v(" 到你的公开仓库 "),a("code",[s._v("blog")]),s._v(" 上试一下吧，记得是推送 "),a("code",[s._v("main")]),s._v(" 分支")]),s._v(" "),a("h3",{attrs:{id:"第三步-运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三步-运行"}},[s._v("#")]),s._v(" 第三步：运行")]),s._v(" "),a("p",[s._v("如果一切正常，"),a("code",[s._v("Actions")]),s._v(" Tab 下面就能看到构建信息，点进去可以查看详情，红框里的内容就是在 "),a("code",[s._v("deploy.yml")]),s._v(" 文件中配置的步骤名称，每个步骤都可以点进去看详情，如果失败了会有失败日志")]),s._v(" "),a("Shadow-Img",{attrs:{src:s.$withBase("/assets/github/7.jpg")}}),s._v(" "),a("p",[s._v("完结。")])],1)}),[],!1,null,null,null);t.default=e.exports}}]);